import sqlite3
from datetime import datetime

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î (—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞)
def get_db_connection():
    conn = sqlite3.connect('diary.db', check_same_thread=False) # –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Ç–æ–∫–æ–≤
    conn.row_factory = sqlite3.Row # –ß—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–ª–∏—Å—å –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–∏
    return conn

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ( –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
def init_db():
    conn = get_db_connection()
    try:
        cursor = conn.cursor()

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS entries (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT NOT NULL,
            text TEXT NOT NULL,
            mood TEXT,
            dream TEXT  
        )''')
        
        # –î–æ–±–∞–≤—è–ª–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å–Ω–æ–≤ (–µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç)
        try: 
            cursor.execute("ALTER TABLE entries ADD COLUMN dream TEXT")
            conn.commit()
            print("–°—Ç–æ–ª–±–µ—Ü 'dream' –¥–æ–±–∞–≤–ª–µ–Ω!")
        except sqlite3.OperationalError as e:
            if "duplicate column name" not in str(e):
                raise e
            print("–°—Ç–æ–ª–±–µ—Ü —É–∂–µ –µ—Å—Ç—å. –ò–¥–µ–º –¥–∞–ª—å—à–µ.")

        conn.commit()
    finally:
        conn.close()

    

def add_entry(text, mood=None, dream=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
INSERT INTO entries (date, text, mood, dream)
VALUES (?, ?, ?, ?)
''', (datetime.now().strftime("%d/%m/%Y, %H:%M:%S"), text, mood, dream))
    conn.commit()

"""–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫."""
def add_entry(text, mood=None, dream=None):
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO entries (date, text, mood, dream) VALUES (?, ?, ?, ?)",
            (datetime.now().strftime("%d/%m/%Y, %H:%M:%S"), text, mood, dream)
        )
        conn.commit()
        print("–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    finally:
        conn.close()

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏"""
def get_entries():
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM entries ORDER BY date DESC")
        return cursor.fetchall()
    finally:
        conn.close()
    


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    init_db()
"""while True:
            print("\n1. –î–æ–±–∞–≤–∏—Ç—å –æ–±—ã—á–Ω—É—é –∑–∞–ø–∏—Å—å")
            print("2. –î–æ–±–∞–≤–∏—Ç—å —Å–æ–Ω")
            print("3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏")
            print("4. –í—ã—Ö–æ–¥")
            choice = input("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: ")

            if choice == "1":
                text = input("–¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏: ")
                mood = input("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ")
                add_entry(text, mood if mood else None)
            elif choice == "2":
                dream = input("–û–ø–∏—à–∏ —Å–æ–Ω: ")
                mood =input("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ")
                add_entry("üåå –°–æ–Ω", mood if mood else None, dream) #–∑–∞–ø–∏—Å—å —Å–Ω–∞.    
            elif choice == "3":
                entries = get_entries()
                for entry in entries:
                    print(f"\n[{entry[1]}] {entry[2]}")
                    if entry[3]:  #mood
                        print(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {entry[3]}")
                    if entry[4]:  #dream
                        print(f"–°–æ–Ω: {entry[4]}")
            elif choice == "4":
                break

conn.close()"""
